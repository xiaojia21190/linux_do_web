name: Build and Release Flutter App

on:
  push:
    tags:
      - "v*" # Trigger on tags like v1.0.0, v2.3.4

jobs:
  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Decode Keystore
        id: decode_keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo $KEYSTORE_BASE64 | base64 --decode > android/app/upload-keystore.jks

      - name: Create key.properties file
        run: |
          echo "storeFile=upload-keystore.jks" > android/key.properties
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
        working-directory: ./

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Build Android App Bundle
        run: flutter build appbundle --release

      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: build/app/outputs/bundle/release/app-release.aab

  build_ios:
    name: Build iOS
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"

      - name: Decode and install certificates
        env:
          P12_BASE64: ${{ secrets.IOS_DIST_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_DIST_CERTIFICATE_PASSWORD }}
        run: |
          echo $P12_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P $P12_PASSWORD -A
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

      - name: Decode and install provisioning profile
        env:
          PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo $PROFILE_BASE64 | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/dist.mobileprovision

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Build iOS IPA
        env:
          TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
        run: |
          flutter build ipa --release --export-options-plist=ios/ExportOptions.plist

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: app-release.ipa
          path: build/ios/ipa/*.ipa

      - name: Clean up keychain
        if: always()
        run: |
          security delete-keychain build.keychain
          rm -f certificate.p12

  create_release:
    name: Create GitHub Release
    needs: [build_android, build_ios]
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: get_tag
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

      - name: Download App Bundle
        uses: actions/download-artifact@v4
        with:
          name: app-release.aab

      - name: Download IPA
        uses: actions/download-artifact@v4
        with:
          name: app-release.ipa

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          draft: false
          prerelease: false

      - name: Upload App Bundle to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app-release.aab
          asset_name: app-release.aab
          asset_content_type: application/vnd.android.package-archive

      - name: Upload IPA to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app-release.ipa
          asset_name: app-release.ipa
          asset_content_type: application/octet-stream
